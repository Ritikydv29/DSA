/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    pair<int,int>count;
    pair<int,int> solve(TreeNode* root)
    {
       if(root==NULL)
       {
           pair<int,int>p;
           p.first=0;
           p.second=0;
           return p;
       }

      pair<int,int>cl=solve(root->left);
       pair<int,int>cr=solve(root->right);
       count.second=max(cl.second,cr.second)+1;
       count.first=max(cl.second+cr.second,max(cl.first,cr.first));
       cout<<"D-> "<<count.first<<" "<<"H-> "<<count.second<<endl;
       return count;
    }
    int diameterOfBinaryTree(TreeNode* root) {
       pair<int,int> z=solve(root);
        return z.first;
    }
};
